// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum UserRole {
  CREATOR
  BRAND
}

enum CouponStatus {
  PENDING    // Aguardando aprovação da marca
  APPROVED   // Aprovado, cupom criado no Shopify
  REJECTED   // Rejeitado pela marca
  ACTIVE     // Ativo e sendo usado
  INACTIVE   // Desativado
}

model User {
  id          String      @id @default(cuid())
  email       String      @unique
  name        String?
  password    String
  role        UserRole
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  
  // Relationships
  brandStore    BrandStore?
  coupons       CouponMap[]
  notifications Notification[]
}

model BrandStore {
  id               String   @id @default(cuid())
  platform         String
  storeUrl         String
  storeName        String?  // Nome amigável da loja
  storeDescription String?  // Descrição da loja
  accessToken      String
  webhookSecret    String   @default("")
  brandId          String   @unique
  brand            User     @relation(fields: [brandId], references: [id])
  isPublic         Boolean  @default(true) // Aparece no marketplace?
  createdAt        DateTime @default(now())
  
  // Relationships
  coupons       CouponMap[]
  transactions  Transaction[]
}

model CouponMap {
  id                 String       @id @default(cuid())
  couponCode         String       @unique
  commissionRate     Decimal      @default(0.10)
  status             CouponStatus @default(PENDING)
  shopifyPriceRuleId String?      // ID do Price Rule no Shopify
  shopifyDiscountId  String?      // ID do Discount Code no Shopify
  
  // Informações do cupom
  discountType  String       @default("PERCENTAGE") // PERCENTAGE ou FIXED_AMOUNT
  discountValue Decimal      @default(10) // 10% ou R$10
  usageLimit    Int?         // Limite de usos (null = ilimitado)
  usageCount    Int          @default(0) // Quantas vezes foi usado
  
  creatorId     String
  creator       User         @relation(fields: [creatorId], references: [id])
  
  brandStoreId  String
  brandStore    BrandStore   @relation(fields: [brandStoreId], references: [id])
  
  createdAt     DateTime     @default(now())
  approvedAt    DateTime?
  rejectedAt    DateTime?
  expiresAt     DateTime?
  
  transactions  Transaction[]
}

model Transaction {
  id               String      @id @default(cuid())
  orderId          String
  orderTotal       Decimal
  commissionAmount Decimal
  status           String      @default("PENDING")
  createdAt        DateTime    @default(now())
  payoutDate       DateTime?
  
  couponMapId     String
  coupon          CouponMap   @relation(fields: [couponMapId], references: [id])
  
  brandStoreId    String
  brandStore      BrandStore  @relation(fields: [brandStoreId], references: [id])
}

model Notification {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  
  type      String   // "NEW_SALE", "COUPON_APPROVED", "COUPON_REJECTED", "NEW_REQUEST"
  title     String
  message   String
  read      Boolean  @default(false)
  
  // Metadata JSON para dados extras
  metadata  Json?
  
  createdAt DateTime @default(now())
  
  @@index([userId, read])
}